#!/usr/bin/lua

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sheverdin.
--- DateTime: 6/3/24 2:26 AM
---

local tf = require "tf_module"

local function get_sntp_info()
    local cmd = "ubus call uci get '{\"config\":\"system\"}'"
    local sntpInfo = tf.collectJsonTable(cmd)
    sntpInfo = sntpInfo.values
    return sntpInfo
end


local function set_state()
    local value = tonumber(arg[2])
    local sntpInfo = get_sntp_info()
    local cmd = ""
    if value == 0 then
        if sntpInfo.ntp.enabled == nil then
            -- sntp enabled
            cmd = "uci set system.ntp.enabled='0'"
            tf.executeCommand(cmd)
        end

        if sntpInfo.ntp.server ~= nil then
            cmd = "uci del system.ntp.server"
            tf.executeCommand(cmd)
        end
    elseif value == 1 then
        if sntpInfo.ntp.enabled ~= nil then
            cmd = "uci del system.ntp.enabled"
            tf.executeCommand(cmd)
        end
    end
end

local function add_server()
    local value = arg[2]
    local sntpInfo = get_sntp_info()
    local sntp_server = {}
    local cmd = ""
    local status = "new"
    if sntpInfo.ntp.enabled == "0" then
        print("---->>> error: SNTP serves is disabled")
    elseif sntpInfo.ntp.enabled == nil or sntpInfo.ntp.enabled == "1" then
        if sntpInfo.ntp.server == nil then
            cmd = "uci add_list system.ntp.server=" .. value
            tf.executeCommand(cmd)
        elseif sntpInfo.ntp.server ~= nil then
            sntp_server = sntpInfo.ntp.server
            for _, host_name in pairs(sntpInfo.ntp.server) do
                if value == host_name then
                    status = "equal"
                    print("\t---->>> error: This time server is present in the list")
                end
            end

            if status == "new" then
                cmd = "uci del system.ntp.server"
                tf.executeCommand(cmd)
                for i, host_name in pairs(sntpInfo.ntp.server) do
                    cmd = "uci add_list system.ntp.server=" .. host_name
                    tf.executeCommand(cmd)
                end
                cmd = "uci add_list system.ntp.server=" .. value
                tf.executeCommand(cmd)
            end
        end
    end
end

local function delete_server()
    local value = arg[2]
    local sntpInfo = get_sntp_info()
    local sntp_server = {}
    local cmd = ""
    if sntpInfo.ntp.enabled == "0" then
        print("---->>> error: SNTP serves is disabled")
    elseif sntpInfo.ntp.enabled == nil or sntpInfo.ntp.enabled == "1" then
        if sntpInfo.ntp.server == nil then
            print("--->>> error: A time server could not be found. ")
        elseif sntpInfo.ntp.server ~= nil then
            sntp_server = sntpInfo.ntp.server
            for _, host_name in pairs(sntpInfo.ntp.server) do
                cmd = "uci del system.ntp.server"
                tf.executeCommand(cmd)
                if value ~= host_name then
                    cmd = "uci add_list system.ntp.server=" .. host_name
                    tf.executeCommand(cmd)
                elseif value == host_name then
                    print("--->>>> info: The time server " .. value .. " was deleted")
                end
            end
        end
    end
end

--uci set system.system.zonename='Etc/GMT+12'
--uci set system.system.timezone='<-12>12'
--
--uci set system.system.zonename='Etc/GMT+3'
--uci set system.system.timezone='<-03>3'


local function set_timezone()
    local TimeZonevalue = arg[2]
    local cmdZoneName = "'Etc/GMT"
    local cmdTimeZone = "'<"
    local setZoneName = ""
    local setTimeZone = ""
    if tonumber(TimeZonevalue) < 0 then
        print("Time zone minus")
        local number = tonumber(TimeZonevalue) * -1
        setZoneName = "system.system.zonename=" .. cmdZoneName .. TimeZonevalue .. "'"
        setTimeZone = "system.system.timezone=" .. cmdTimeZone

        if number < 10 then
            setTimeZone = setTimeZone .. "+0" .. number .. ">'" .. TimeZonevalue
        else
            setTimeZone = setTimeZone .. "+" .. number .. ">'" .. TimeZonevalue
        end
    else
        setZoneName = "system.system.zonename=" .. cmdZoneName .. "+" .. TimeZonevalue .. "'"
        setTimeZone = "system.system.timezone=" .. cmdTimeZone

        if tonumber(TimeZonevalue) < 10 then
            setTimeZone = setTimeZone .. "-0" .. TimeZonevalue .. ">'" .. TimeZonevalue
        else
            setTimeZone = setTimeZone .. "-" .. TimeZonevalue .. ">'" .. TimeZonevalue
        end
    end

    local cmd = "uci set " .. setZoneName
    tf.executeCommand(cmd)
    cmd = "uci set " .. setTimeZone
    tf.executeCommand(cmd)

end

local sntp_cmdList =
{
    { cmd = "state",       func = set_state },
    { cmd = "add",        func = add_server },
    { cmd = "delete",    func = delete_server },
    { cmd = "timezone",   func = set_timezone },
}

local function run_config_sntp()
    local errorCode = 0
    errorCode = tf.validateParam(2, arg)
    if errorCode == 0 then
        for _, value in pairs(sntp_cmdList) do
            if arg[1] == value.cmd then
                value.func()
            end
        end
    end
end

run_config_sntp()






